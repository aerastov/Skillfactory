from random import randint
clear = "\n" * 10
class Dot:
    pass

# класс Dot — класс точек на поле. Каждая точка описывается параметрами:
# Координата по оси x .
# Координата по оси y .
# В программе мы будем часто обмениваться информацией о точках на поле, поэтому имеет смысл
# сделать отдельный тип данных дня них. Очень удобно будет реализовать в этом классе метод __eq__,
# чтобы точки можно было проверять на равенство. Тогда, чтобы проверить, находится ли точка в списке,
# достаточно просто использовать оператор in, как мы делали это с числами

class BoardException(Exception):
    pass

class BoardWrongShipException(BoardException):
    pass

class Ship:
# класс Ship — корабль на игровом поле, который описывается параметрами:
# Длина. Точка, где размещён нос корабля. Направление корабля(вертикальное / горизонтальное).
# Количеством жизней(сколько точек корабля еще не подбито). И имеет методы:
# Метод dots, который возвращает список всех точек корабля.
    pass

class Board:
# класс Board — игровая доска. Доска описывается параметрами:
# Двумерный список, в котором хранятся состояния каждой из клеток. Список кораблей доски.
# Параметр hid типа bool — информация о том, нужно ли скрывать корабли на доске (для вывода доски врага) или нет (для своей доски).
# Количество живых кораблей на доске.
# И имеет методы:
# Метод add_ship, который ставит корабль на доску (если ставить не получается, выбрасываем исключения).
# Метод contour, который обводит корабль по контуру. Он будет полезен и в ходе самой игры, и в при расстановке кораблей
# (помечает соседние точки, где корабля по правилам быть не может).
# Метод, который выводит доску в консоль в зависимости от параметра hid.
# Метод out, который для точки (объекта класса Dot) возвращает True, если точка выходит за пределы поля, и False, если не выходит.
# Метод shot, который делает выстрел по доске (если есть попытка выстрелить за пределы и в использованную точку, нужно
# выбрасывать исключения).
    pass

class Player:
# Класс Player — класс игрока в игру (и AI, и пользователь). Этот класс будет родителем для классов с AI и с пользователем.
# Игрок описывается параметрами:
# Собственная доска (объект класса Board) Доска врага.
# И имеет следующие методы:
# ask — метод, который «спрашивает» игрока, в какую клетку он делает выстрел. Пока мы делаем общий для AI и пользователя класс,
# этот метод мы описать не можем. Оставим этот метод пустым. Тем самым обозначим, что потомки должны реализовать этот метод.
# move — метод, который делает ход в игре. Тут мы вызываем метод ask, делаем выстрел по вражеской доске (метод Board.shot),
# отлавливаем исключения, и если они есть, пытаемся повторить ход. Метод должен возвращать True, если этому игроку нужен
# повторный ход (например если он выстрелом подбил корабль).
    pass

# Теперь нам остаётся унаследовать классы AI и User от Player и переопределить в них метод ask. Для AI это будет выбор случайной
# точка, а для User этот метод будет спрашивать координаты точки из консоли.
class AI(Player):
    pass
class User(Player):
    pass

class Game:
    # класс Game. Игра описывается параметрами:
    # Игрок-пользователь, объект класса User. Доска пользователя. Игрок-компьютер, объект класса Ai. Доска компьютера.
    # И имеет методы:
    # random_board — метод генерирует случайную доску. Для этого мы просто пытаемся в случайные клетки изначально пустой
    # доски расставлять корабли (в бесконечном цикле пытаемся поставить корабль в случайную току, пока наша попытка не окажется
    # успешной). Лучше расставлять сначала длинные корабли, а потом короткие. Если было сделано много (несколько тысяч) попыток
    # установить корабль, но это не получилось, значит доска неудачная и на неё корабль уже не добавить. В таком случае нужно
    # начать генерировать новую доску.
    # greet — метод, который в консоли приветствует пользователя и рассказывает о формате ввода.
    # loop — метод с самим игровым циклом. Там мы просто последовательно вызываем метод mode для игроков и делаем проверку,
    # сколько живых кораблей осталось на досках, чтобы определить победу.
    def __init__(self, size=10):
        self.size = size

    def generation_board(self):
        # Матрица size * size для каждой доски: (0 пусто; 1 корабль, 2 мимо, 3 ранен)
        # return [[ i * j for j in range(size)] for i in range(size)]
        return [[randint(0, 3) for j in range(self.size)] for i in range(self.size)]

    def greet(self):
        print(clear, "\nПривет! Давай сыграем в морской бой!")

    def loop(self):
        num = 0
        while True:
            if self.size == 10:
                print("         Твое поле боя:", " "*20, "Поле боя вражеского AI:")
                print("   \033[4mА  Б  В  Г  Д  Е  Ж  З  И  К\033[0m" + " " * 12 + "\033[4mА  Б  В  Г  Д  Е  Ж  З  И  К\033[0m")
            else:
                print("    Твое поле боя:", " "*8, "Поле боя вражеского AI:")
                print("   \033[4mА  Б  В  Г  Д  Е\033[0m" + " " * 12 + "\033[4mА  Б  В  Г  Д  Е\033[0m")
            board_user = self.generation_board()
            board_comp = self.generation_board()
            board_user_iter = iter(board_user)
            board_comp_iter = iter(board_comp)
            for i in range(1, self.size + 1):
                p2 = str("  ".join(map(str, next(board_comp_iter))))
                p2 = p2.replace("1", "0") # Стираем с доски корабли противника (AI)
                board = str("|" + "  ".join(map(str, next(board_user_iter))) + "|" + " "*10 + "|" + p2 + "|") # Собираем строку
                board = board.replace("1", "■") # Тут и далее конвертируем цифры в отображаемые элементы
                board = board.replace("0", "·")
                board = board.replace("2", "*")
                board = board.replace("3", "\033[31m\033[5mХ\033[0m")
                if i == 10: y = str(i)
                else: y = str(" " + str(i))
                print(y + board + str(i))
            if self.size == 10:
                print("   " + "—"*28 + " "*12 + "—"*28)
            else:
                print("   " + "—" * 16 + " " * 12 + "—" * 16)

            break


            # if num % 2 == 0:
            #     print("-" * 20)
            #     print("Ходит пользователь!")
            #     repeat = self.us.move()
            # else:
            #     print("-" * 20)
            #     print("Ходит компьютер!")
            #     repeat = self.ai.move()
            # if repeat:
            #     num -= 1
            #
            # if self.ai.board.count == 7:
            #     print("-" * 20)
            #     print("Пользователь выиграл!")
            #     break
            #
            # if self.us.board.count == 7:
            #     print("-" * 20)
            #     print("Компьютер выиграл!")
            #     break
            # num += 1

    def start(self):
        self.greet()
        self.loop()


g = Game()
g.start()